require "active_support"
require "active_support/core_ext"
require 'json'
require 'nokogiri'
require 'pathname'
require 'yaml'
require 'open3'

Dir.chdir __dir__

ActiveSupport::Inflector.inflections(:en) do |inflect|
  inflect.acronym 'A1M1'
  inflect.acronym 'M2'
end

class Pathname
  alias to_str to_s
end

DATAPOINT_DEFINITIONS_RAW                         = 'datapoint_definitions.raw.yml'
DATAPOINT_DEFINITIONS_CLEANED                     = 'datapoint_definitions.cleaned.yml'
DATAPOINT_TYPES_RAW                               = 'datapoint_types.raw.yml'
DATAPOINT_TYPES                                   = 'datapoint_types.yml'
TRANSLATIONS_RAW                                  = 'translations.raw.yml'
TRANSLATIONS_CLEANED                              = 'translations.cleaned.yml'
REVERSE_TRANSLATIONS_RAW                          = 'reverse_translations.raw.yml'
SYSTEM_EVENT_TYPES_RAW                            = 'system_event_types.raw.yml'
SYSTEM_EVENT_TYPES_CLEANED                        = 'system_event_types.cleaned.yml'
SYSTEM_EVENT_TYPES_USED                           = 'system_event_types.used.yml'
DEVICES_CLEANED                                   = 'devices.cleaned.yml'
MAPPINGS_UNIQUE                                   = 'mappings.unique.yml'
TRANSLATIONS_UNIQUE                               = 'translations.unique.yml'
EVENT_TYPES_USED                                  = 'event_types.used.yml'
MAPPINGS_USED                                     = 'mappings.used.yml'
TRANSLATIONS_USED                                 = 'translations.used.yml'
DEVICES_USED                                      = 'devices.used.yml'
VERSIONS_USED                                     = 'versions.used.yml'

file MAPPINGS_USED => [DEVICES_USED, EVENT_TYPES_USED, MAPPINGS_UNIQUE, TRANSLATIONS_UNIQUE] do |t|
  used_devices, used_commands, mappings_unique, translations_unique = t.sources.map { |source| load_yaml(source) }
  device_error_mappings = used_devices.map { |_, v| v.fetch('error_mapping') }
  command_mappings = used_commands.filter_map { |_, v| v['mapping'] }

  used_mappings = (device_error_mappings + command_mappings).uniq.reduce({}) { |h, k|
    h[k] = mappings_unique.fetch(:translations).fetch(k)
    h
  }.deep_sort!

  File.write t.name, used_mappings.to_yaml
end

file TRANSLATIONS_USED => [MAPPINGS_USED, TRANSLATIONS_UNIQUE] do |t|
  used_mappings, translations_unique = t.sources.map { |source| load_yaml(source) }

  used_translations = used_mappings
    .flat_map { |_, translations|
      translations.map { |_, translation_id| translation_id }
    }
    .reduce({}) { |h, translation_id|
      h[translation_id] = translations_unique.fetch(:translations).fetch(translation_id)
      h
    }
    .deep_sort!

  File.write t.name, used_translations.to_yaml
end

file MAPPINGS_UNIQUE => [DATAPOINT_DEFINITIONS_CLEANED, SYSTEM_EVENT_TYPES_CLEANED, TRANSLATIONS_UNIQUE] do |t|
  datapoint_definitions, system_event_types, translations = t.sources.map { |source| load_yaml(source) }
  event_types = datapoint_definitions.fetch('event_types')

  error_mappings = translations.fetch(:mapping).reduce({}) { |h, (translation_id, mapping_id)|
    if /^(?<id>viessmann\.errorcode(?:\.SMS)?(?:\.[^.]+)?)\.(?<value>\h{2})$/ =~ translation_id
      h[id] ||= {}
      h[id][value.to_i(16)] = mapping_id
    end

    h
  }

  mappings = system_event_types.merge(event_types).reduce({}) { |h, (id, event_type)|
    value_list = event_type.fetch('value_list', {})

    next h if value_list.empty?

    h[event_type.fetch('type_id')] = value_list.transform_values { |translation_id|
      translations.fetch(:mapping).fetch(translation_id)
    }

    h
  }

  File.write t.name, create_mapping_to_unique(mappings.merge(error_mappings)).to_yaml
end

def create_mapping_to_unique(input)
  input.deep_sort!

  reversed = {}

  input.each do |k, v|
    reversed[v] ||= []
    reversed[v] << k
  end

  reversed.transform_values! { |v| v.sort.uniq }

  mapping = {}
  combined = {}

  id_map = {}
  id = 0

  reversed.each do |k, v|
    id_key = v.sort_by(&:length).first

    if (existing_id = id_map[id_key])
      new_id = existing_id
    else
      new_id = id_map[id_key] = id
      id += 1
    end

    v.each do |old_id|
      mapping[old_id] = new_id
    end

    combined[new_id] = k
  end

  {
    mapping: mapping,
    translations: combined,
  }.deep_sort!
end

file TRANSLATIONS_UNIQUE => TRANSLATIONS_CLEANED do |t|
  translations = load_yaml(t.sources.first)
  File.write t.name, create_mapping_to_unique(translations).to_yaml
end

def map_command_id(id)
  exact_mappings = {
    'NRF_TiefpassTemperaturwert_PTSO'               => 'buffer_temperature_actual_1',
    'NRF_TiefpassTemperaturwert_PTSU'               => 'buffer_temperature_actual_2',
    'NRF_Temperaturanstieg_STSSOL'                  => 'buffer_temperature_desired',
    'NRF_Temperaturanstieg_PTSU'                    => 'buffer_temperature_actual_3',
    'NRF_Temperaturanstieg_VTSM2'                   => 'buffer_temperature_average',
    'SC100_KesselIsttemperatur'                     => 'boiler_temperature_actual',
    'SC100_Flammtemperatur'                         => 'flame_temperature_actual',
    'SC100_Einschubtemperatur'                      => 'slot_temperature_actual',
    'VT_SolltemperaturA1M1'                         => 'flow_temperature_desired_a1m1',
    'Ausgang52_Mischerposition_M1'                  => 'mixer_position_m1',
    'HK_Mischerposition_akt_M1'                     => 'mixer_position_m1',
    'VorlauftemperaturM1'                           => 'flow_temperature_actual_m1',
    'ADC_Isttemperaturwert_2'                       => 'flow_temperature_actual_m1',
    'Temperatur_2_M1'                               => 'flow_temperature_actual_m1',
    'VT_SolltemperaturM2'                           => 'flow_temperature_desired_m1',
    'VorlauftemperaturM2'                           => 'flow_temperature_actual_m2',
    'Temperatur_2_M2'                               => 'flow_temperature_actual_m2',
    'K90_KonfiZeitkonstAussentemperatur'            => 'outside_temperature_damping_time_constant',
    'Gemischte_AT'                                  => 'outside_temperature_damped',

    'BedienBetriebsartA1M1'                         => 'operating_mode_a1m1',
    'BedienBetriebsartM2'                           => 'operating_mode_m2',
    'Geraetekennung_Diode'                          => 'device_identification',
    'TiefpassTemperaturwert_ATS'                    => 'outside_temperature_lowpass',
    'ADC_IstTemperaturwert_ATS'                     => 'outside_temperature_actual',
    'ADC_IstTemperaturwert_AGTS'                    => 'exhaust_temperature_actual',
    'ADC_Isttemperaturwert_KTS'                     => 'boiler_temperature_actual',
    'TiefpassTemperaturwert_STS1'                   => 'dhw_temperature_lowpass',
    'ADC_IstTemperaturwert_STS1'                    => 'dhw_temperature_actual',
    'TemperaturFehler_STS1'                         => 'dhw_temperature_error',
    'Bedien_WW_Solltemperatur'                      => 'dhw_temperature_desired',
    'TemperaturFehler_AGTS'                         => 'exhaust_temperature_error',
    'TiefpassTemperaturwert_AGTS'                   => 'exhaust_temperature_lowpass',
    'AGTemperaturwertMAXBedienFunktionReset'        => 'exhaust_temperature_max_achieved_reset',
    'BedienRTSolltemperaturReduziertA1M1'           => 'room_temperature_desired_reduced_a1m1',
    'BedienRTSolltemperaturReduziertM2'             => 'room_temperature_desired_reduced_m2',
    'BedienRTSolltemperaturA1M1'                    => 'room_temperature_desired_a1m1',
    'BedienRTSolltemperaturM2'                      => 'room_temperature_desired_m2',
    'HK_RaumsolltemperaturaktuellA1M1'              => 'room_temperature_desired_effective_a1m1',
    'HK_RaumsolltemperaturaktuellM2'                => 'room_temperature_desired_effective_m2',
    'TiefpassTemperatur_RTS_A1M1'                   => 'room_temperature_lowpass_a1m1',
    'TiefpassTemperaturwert_RTS_M2'                 => 'room_temperature_lowpass_m2',
    'TiefpassTemperaturwert_KTS_A1'                 => 'flow_temperature_lowpass_a1m1',
    'HK_VT_Solltemperatur_A1M1'                     => 'flow_temperature_desired_a1m1',
    'HK_VT_Solltemperatur_M2'                       => 'flow_temperature_desired_m2',
    'TemperaturFehler_17_NR1'                       => 'return_temperature_error_status',
    'TiefpassTemperaturwert_17_NR1'                 => 'return_temperature_lowpass_nr1',
    'RuecklauftemperaturM2'                         => 'return_temperature_actual_m2',
    'TemperaturFehler_2_NR1'                        => 'flow_temperature_error_status',
    'TiefpassTemperaturwert_2_NR1'                  => 'flow_temperature_lowpass_nr1',
    'WW_SolltemperaturAktuell'                      => 'dhw_temperature_desired_effective',
    'Zubringerpumpe'                                => 'feed_pump',
    'HK_AktuelleBetriebsartA1M1'                    => 'heating_circuit_operating_mode_effective_a1m1',
    'HK_AktuelleBetriebsartM2'                      => 'heating_circuit_operating_mode_effective_m2',
    'FerienBeginnA1M1'                              => 'holiday_departure_date_a1m1',
    'FerienBeginnM2'                                => 'holiday_departure_date_m2',
    'FerienEndeA1M1'                                => 'holiday_return_date_a1m1',
    'FerienEndeM2'                                  => 'holiday_return_date_m2',
    'Brennertyp_aktuell'                            => 'burner_type_effective',
    'Brennerstarts'                                 => 'burner_starts',
    'BedienSparbetriebA1M1'                         => 'economy_mode_a1m1',
    'BedienSparbetriebM2'                           => 'economy_mode_m2',
    'BedienPartybetriebA1M1'                        => 'party_mode_a1m1',
    'BedienPartybetriebM2'                          => 'party_mode_m2',
    'BedienRTSoll_PartyA1M1'                        => 'party_mode_temperature_desired_a1m1',
    'BedienRTSoll_PartyM2'                          => 'party_mode_temperature_desired_m2',
    'BedienNiveauA1M1'                              => 'heating_curve_level_a1m1',
    'BedienNiveauM2'                                => 'heating_curve_level_m2',
    'BedienNeigungA1M1'                             => 'heating_curve_slope_a1m1',
    'BedienNeigungM2'                               => 'heating_curve_slope_m2',
    'TemperaturFehler_KTS'                          => 'boiler_temperature_error_status',
    'VT_SollKesselA1M1_NR1'                         => 'boiler_temperature_desired_a1m1_nr1',
    'VT_SollKesselM2_NR1'                           => 'boiler_temperature_desired_m2_nr1',
    'TiefpassTemperaturwert_KTS'                    => 'boiler_temperature_lowpass',
    'Absenkzeit_gelerntM2'                          => 'setback_period_experience_based',
    'AGTemperaturwertMAX'                           => 'exhaust_temperature_max_achieved',
    'AGTemperaturwertMAXBedien'                     => 'exhaust_temperature_max',
    'Aufheizgradient_gelerntA1M1'                   => 'heat_up_gradient_experience_based_a1m1',
    'Aufheizgradient_gelerntM2'                     => 'heat_up_gradient_experience_based_m2',
    'BetriebsstundenBrenner1Bedienung'              => 'burner_hours_stage_1',
    'BetriebsstundenBrenner1BedienungFunktionReset' => 'burner_hours_stage_1_reset',
    'BetriebsstundenBrenner2Bedienung'              => 'burner_hours_stage_2',
    'BetriebsstundenBrenner2BedienungFunktionReset' => 'burner_hours_stage_2_reset',
    'BrennerstartsFunktionReset'                    => 'burner_starts_reset',
    'HK_FerienbetriebA1M1'                          => 'holiday_program_a1m1',
    'HK_FerienbetriebM2'                            => 'holiday_program_m2',
    'HK_Frostgefahr_aktivA1M1'                      => 'frost_risk_a1m1',
    'HK_Frostgefahr_aktivM2'                        => 'frost_risk_m2',
    'HK_PumpenzustandA1M1'                          => 'heating_circuit_pump_a1m1',
    'HK_PumpenzustandM2'                            => 'heating_circuit_pump_m2',
    'HK_ReglervarianteA1M1'                         => 'controller_version_a1m1',
    'HK_ReglervarianteA1M1_NR1'                     => 'controller_version_a1m1_nr1',
    'HK_ReglervarianteM2'                           => 'controller_version_m2',
    'HK_ReglervarianteM2_NR1'                       => 'controller_version_m2_nr1',
    'Uhrzeit'                                       => 'date_time',
    'AutomaticFlag_WWA1M1'                          => 'dhw_switching_times_mode_a1m1',
    'AutomaticFlag_WWM2'                            => 'dhw_switching_times_mode_m2',
    'AutomaticFlag_ZPA1M1'                          => 'dhw_circulation_pump_switching_times_mode_a1m1',
    'Schaltzeiten_A1M1_ZP'                          => 'dhw_circulation_pump_switching_times_a1m1',
    'AutomaticFlag_ZPM2'                            => 'dhw_circulation_pump_switching_times_mode_m2',
    'Schaltzeiten_M2_ZP'                            => 'dhw_circulation_pump_switching_times_m2',
    'Schaltzeiten_A1M1_WW'                          => 'dhw_switching_times_a1m1',
    'Schaltzeiten_M2_WW'                            => 'dhw_switching_times_m2',
    'Schaltzeiten_A1M1_HK'                          => 'heating_circuit_switching_times_a1m1',
    'Schaltzeiten_M2_HK'                            => 'heating_circuit_switching_times_m2',
    'WW_Status_NR1'                                 => 'dhw_status_nr1',
    'TiefpassTemperaturwert_VTS'                    => 'flow_temperature_adjusted',
    'DigitalAusgang_Zirkulationspumpe'              => 'circulation_pump_status',
    'DigitalAusgang_Speicherladepumpe'              => 'storage_tank_charging_pump_status',
    'DigitalAusgang_Brenner'                        => 'burner_stage_1_status',
    'DigitalAusgang_Benner2'                        => 'burner_stage_2_status',
    'DigitalEingang_BrennerStoerung'                => 'burner_fault_status',
    'HK_AufheiztimerA1M1'                           => 'heating_circuit_heat_up_phase_timer_a1m1',
    'HK_AufheiztimerM2'                             => 'heating_circuit_heat_up_phase_timer_m2',
    'HK_PumpenbefehlA1M1'                           => 'heating_circuit_pump_command_status_a1m1',
    'HK_PumpenbefehlM2'                             => 'heating_circuit_pump_command_status_m2',
    'HK_SchnellkorrekturA1M1'                       => 'heating_circuit_quick_correction_a1m1',
    'HK_SchnellkorrekturM2'                         => 'heating_circuit_quick_correction_m2',
    'TemperaturFehler_ATS'                          => 'outside_temperature_error_status',
    'SystemIdent_SX'                                => 'device_group',
    'Sachnummer'                                    => 'part_number',
    'KesselSolltemperaturwert'                      => 'boiler_temperature_desired',
    'DigitalAusgang_21'                             => 'digital_output_21',
    'DigitalAusgang_28'                             => 'digital_output_28',
    'HK_WW_Freigabe_vonA1M1'                        => 'dhw_release_a1m1',
    'HK_WW_Freigabe_vonM2'                          => 'dhw_release_m2',
    'D_Ausgang20_M2'                                => 'digital_output_20_m2',
    'ecnsysFehlerhistorie0'                         => 'system_error_history_0',
    'ecnsysFehlerhistorie1'                         => 'system_error_history_1',
    'ecnsysFehlerhistorie2'                         => 'system_error_history_2',
    'ecnsysFehlerhistorie3'                         => 'system_error_history_3',
    'ecnsysFehlerhistorie4'                         => 'system_error_history_4',
    'ecnsysFehlerhistorie5'                         => 'system_error_history_5',
    'ecnsysFehlerhistorie6'                         => 'system_error_history_6',
    'ecnsysFehlerhistorie7'                         => 'system_error_history_7',
    'ecnsysFehlerhistorie8'                         => 'system_error_history_8',
    'ecnsysFehlerhistorie9'                         => 'system_error_history_9',
    'DigitalAusgang_20'                             => 'digital_output_20',
    'DigitalAusgang_52Auf'                          => 'digital_output_52_open',
    'DigitalAusgang_52Zu'                           => 'digital_output_52_closed',
    'FB_A1_SW_Index'                                => 'remote_control_software_index_a1m1',
    'FB_M2_SW_Index'                                => 'remote_control_software_index_m2',
    'Oelverbrauch'                                  => 'fuel_consumption',
    'Oelverbrauch_Reset'                            => 'fuel_consumption_reset',
    'Nachtkontakt_HKPA1'                            => 'heating_circuit_pump_night_contact_a1m1',
    'Nachtkontakt_HKPM2'                            => 'heating_circuit_pump_night_contact_m2',
    'ResetCounter'                                  => 'reset_counter',
    'RelaistestV200KW2_NR1'                         => 'relay_test_v200kw2_nr1',
  }

  # mapped_id = exact_mappings.fetch(id, id)

  id
end

def map_parameter(parameter)
  parameter.underscore
end

def strip_address(s)
  s.sub(/[~+](:?0x|hx)?\h{4}\Z/, '')
end

def load_yaml(path)
  YAML.safe_load(File.read(path), permitted_classes: [Symbol])
end

def type_to_command(type_id, type, mappings:, translations:)
  command = {}

  command['name'] = type_id

  command['addr'] = type.fetch('address')
  command['mode'] = type.fetch('access_mode')

  command['parameter'] = map_parameter(type['parameter'])
  command['unit'] = type['unit']

  data_type = type.fetch('value_type', type['sdk_data_type'])

  if (conversion = type['conversion'])
    case conversion
    when 'date_time_bcd'
      unless data_type == 'DateTime'
        raise "Conversion #{conversion} not supported for type #{data_type}."
      end
    when 'date_bcd'
      if data_type == 'DateTime'
        data_type = 'Date'
      else
        raise "Conversion #{conversion} not supported for type #{data_type}."
      end
    else
      command['conversion'] = conversion
    end
  end

  command['data_type'] = data_type
  command['mapping_type'] = type['mapping_type']

  command['conversion_factor'] = type['conversion_factor']
  command['conversion_offset'] = type['conversion_offset']

  command['block_count'] = type['block_factor']
  command['block_len'] = type.fetch('block_length')
  command['byte_len'] = type.fetch('byte_length')
  command['byte_pos'] = type.fetch('byte_position')
  command['bit_len'] = type['bit_length']
  command['bit_pos'] = type.fetch('bit_position')

  if (lower_border = type.fetch('lower_border', nil))
    command['lower_border'] = lower_border
  end
  if (upper_border = type.fetch('upper_border', nil))
    command['upper_border'] = upper_border
  end

  value_list = type.fetch('value_list', {})
  enum_type = value_list.any?

  if enum_type
    command['mapping'] = mappings.fetch(:mapping).fetch(type_id)
  end

  command.compact
end

file DEVICES_USED => [DEVICES_CLEANED, MAPPINGS_UNIQUE] do |t|
  devices, mappings_unique = t.sources.map { |source| load_yaml(source) }

  default_error_mapping = mappings_unique.fetch(:mapping).fetch('viessmann.errorcode')

  devices = devices.reduce({}) { |h, (device_id, device)|
    h[device_id] = {
      'id' => device.fetch('identification', nil),
      'id_ext' => device.fetch('identification_extension', nil),
      'id_ext_till' => device.fetch('identification_extension_till', nil),
      'f0' => device.fetch('f0', nil),
      'f0_till' => device.fetch('f0_till', nil),
      'commands' => device['event_types']
        .map { |command_name| command_name }
        .uniq
        .sort,
      'error_mapping' => mappings_unique.fetch(:mapping).fetch("viessmann.errorcode.#{device_id}", default_error_mapping),
    }
    h
  }.deep_sort!

  File.write t.name, devices.to_yaml
end

file EVENT_TYPES_USED => [DEVICES_USED, DATAPOINT_DEFINITIONS_CLEANED, SYSTEM_EVENT_TYPES_CLEANED, MAPPINGS_UNIQUE, TRANSLATIONS_UNIQUE] do |t|
  used_devices, datapoint_definitions, system_event_types, mappings_unique, translations_unique =
    t.sources.map { |source| load_yaml(source) }
  event_types = datapoint_definitions.fetch('event_types')

  used_event_type_ids = used_devices.each_value.reduce(Set.new) { |s, d| s | d['commands'].to_set }

  used_event_types = system_event_types.merge(event_types).keep_if { |event_type_id,|
    used_event_type_ids.include?(event_type_id)
  }

  used_commands = used_event_types.reduce({}) { |h, (id, event_type)|
    event_type_id = event_type.fetch('type_id')
    h[id] = type_to_command(event_type_id, event_type, mappings: mappings_unique, translations: translations_unique)
    h
  }.deep_sort!

  File.write t.name, used_commands.to_yaml
end

file SYSTEM_EVENT_TYPES_USED => [SYSTEM_EVENT_TYPES_CLEANED, MAPPINGS_UNIQUE, TRANSLATIONS_UNIQUE] do |t|
  system_event_types_cleaned, mappings_unique, translations_unique = t.sources.map { |source| load_yaml(source) }

  system_event_types = system_event_types_cleaned.reduce({}) { |h, (event_type_id, event_type)|
    id = event_type_id
      .sub(/^ecnsys(EventType~)?/, '')
      .gsub(/([a-z])([A-Z0-9])/, '\1_\2')
      .gsub('LON', '_LON_')
      .gsub('BHKW', '_CHP_') # Blockheizkraftwerk -> Combined Heat & Power
      .split(/_+/)
      .filter_map { |part|
        {
          '' => nil,
          'Ident' => 'id',
          'Fehlerhistorie' => 'error_history',
          'Anlagennummer' => 'system_number',
          'Teilnehmernummer' => 'subscriber_number',
          'Modul' => 'module',
        }.fetch(part, part)
      }.join('_').downcase

    h[id] = type_to_command(event_type_id, event_type, mappings: mappings_unique, translations: translations_unique)
    h
  }.deep_sort!

  File.write t.name, system_event_types.to_yaml
end

file VERSIONS_USED => DATAPOINT_DEFINITIONS_RAW do |t|
  datapoint_definitions, = t.sources.map { |source| load_yaml(source) }

  File.write t.name, datapoint_definitions['versions'].to_yaml
end

multitask :default => [DEVICES_USED, EVENT_TYPES_USED, MAPPINGS_USED, TRANSLATIONS_USED, SYSTEM_EVENT_TYPES_USED, VERSIONS_USED]

task :clean do
  rm Dir.glob('*.yml')
end
